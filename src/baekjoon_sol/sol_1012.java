package baekjoon_sol;

import java.util.ArrayList;
import java.util.Scanner;

/**
 * 
 * @author jeehyun
 * @date 20. 04. 09
 * @desc    유기농 배추
 * 	문제 :	
 * 		차세대 영농인 한나는 강원도 고랭지에서 유기농 배추를 재배하기로 하였다. 
 * 		농약을 쓰지 않고 배추를 재배하려면 배추를 해충으로부터 보호하는 것이 중요하기 때문에, 한나는 해충 방지에 효과적인 배추흰지렁이를 구입하기로 결심한다. 
 * 
 * 		이 지렁이는 배추근처에 서식하며 해충을 잡아 먹음으로써 배추를 보호한다. 
 * 		특히, 어떤 배추에 배추흰지렁이가 한 마리라도 살고 있으면 이 지렁이는 인접한 다른 배추로 이동할 수 있어, 
 * 		그 배추들 역시 해충으로부터 보호받을 수 있다.
 * 		(한 배추의 상하좌우 네 방향에 다른 배추가 위치한 경우에 서로 인접해있다고 간주한다)
 * 
 * 		한나가 배추를 재배하는 땅은 고르지 못해서 배추를 군데군데 심어놓았다. 
 * 		배추들이 모여있는 곳에는 배추흰지렁이가 한 마리만 있으면 되므로 
 *  	서로 인접해있는 배추들이 몇 군데에 퍼져있는지 조사하면 총 몇 마리의 지렁이가 필요한지 알 수 있다.
 *  
 *    예를 들어 배추밭이 아래와 같이 구성되어 있으면 최소 5마리의 배추흰지렁이가 필요하다.
 *    (0은 배추가 심어져 있지 않은 땅이고, 1은 배추가 심어져 있는 땅을 나타낸다.)
 *     1	1	0	0	0	0	0	0	0	0
 *     0	1	0	0	0	0	0	0	0	0
 *     0	0	0	0	1	0	0	0	0	0
 *     0	0	0	0	1	0	0	0	0	0
 *     0	0	1	1	0	0	0	1	1	1
 *     0	0	0	0	1	0	0	1	1	1
 *     
 *  입력
 *     입력의 첫 줄에는 테스트 케이스의 개수 T가 주어진다. 그 다음 줄부터 각각의 테스트 케이스에 대해 첫째 줄에는 배추를 심은 배추밭의 가로길이 M(1 ≤ M ≤ 50)과 세로길이 N(1 ≤ N ≤ 50), 그리고 배추가 심어져 있는 위치의 개수 K(1 ≤ K ≤ 2500)이 주어진다. 그 다음 K줄에는 배추의 위치 X(0 ≤ X ≤ M-1), Y(0 ≤ Y ≤ N-1)가 주어진다.
 *     
 *  출력
 *     각 테스트 케이스에 대해 필요한 최소의 배추흰지렁이 마리 수를 출력한다.
 *     
 *     
 *  -> 1끼리 인접해있는 부분끼리 묶어주기 / 몇 개 덩어리가 나오는지 카운트
 */
public class sol_1012 {

	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);
		int T = sc.nextInt();
		
		for(int i = 0; i<T; i++) {
			int M = sc.nextInt();   // 가로
			int N = sc.nextInt();   // 세로
			int K = sc.nextInt();   // 배추의 개수
			
			int[] X = new int[K];
			int[] Y = new int[K];
			for(int j = 0; j < K; j++) {
				int m = sc.nextInt();
				int n = sc.nextInt();
				
				X[j] = m;
				Y[j] = n;
			}
			
			ArrayList<ArrayList<Integer>> dist1 = new ArrayList<>();
			for(int m = 0; m < X.length; m++ ) {
				int x0 = X[m];
				int y0 = Y[m];
				ArrayList<Integer> tmp = new ArrayList<>();
				tmp.add(m);
				
				for(int n = m+1; n < X.length; n++) {
					int x1 = X[n];
					int y1 = Y[n];
					
					int dist = (x0 - x1)*(x0 - x1) + (y0 -y1) * (y0 - y1);
					if(dist == 1) {
						tmp.add(n);
					}
				}
				
				if(tmp.size() > 1) dist1.add(tmp);
			}

			for(int j = 0; j < K; j++) {
				// key = j
				for(int k = 0; k < dist1.size(); k++) {
					if(dist1.get(k).contains(j)) {
						
					}
				}
			}
			
//			0
//			1
//			=======
//			1
//			2
//			=======
//			3
//			4
//			=======
//			6
//			7
//			=======
//			8
//			9
//			11
//			=======
//			9
//			10
//			12
//			=======
//			10
//			13
//			=======
//			11
//			12
//			14
//			=======
//			12
//			13
//			15
//			=======
//			13
//			16
//			=======
//			14
//			15
//			=======
//			15
//			16
//			=======
			
//					j = 0, k = 1
//					j = 0, k = 2
//					j = 0, k = 3
//					j = 0, k = 4
//					j = 0, k = 5
//					j = 0, k = 6
//					j = 0, k = 7
//					j = 0, k = 8
//					j = 0, k = 9
//					j = 0, k = 10
//					j = 0, k = 11
//					j = 1, k = 2
//					j = 1, k = 3
//					j = 1, k = 4
//					j = 1, k = 5
//					j = 1, k = 6
//					j = 1, k = 7
//					j = 1, k = 8
//					j = 1, k = 9
//					j = 1, k = 10
//					j = 1, k = 11
//					j = 2, k = 3
//					j = 2, k = 4
//					j = 2, k = 5
//					j = 2, k = 6
//					j = 2, k = 7
//					j = 2, k = 8
//					j = 2, k = 9
//					j = 2, k = 10
//					j = 2, k = 11
//					j = 3, k = 4
//					j = 3, k = 5
//					j = 3, k = 6
//					j = 3, k = 7
//					j = 3, k = 8
//					j = 3, k = 9
//					j = 3, k = 10
//					j = 3, k = 11
//					j = 4, k = 5
//					j = 4, k = 6
//					j = 4, k = 7
//					j = 4, k = 8
//					j = 4, k = 9
//					j = 4, k = 10
//					j = 4, k = 11
//					j = 5, k = 6
//					j = 5, k = 7
//					j = 5, k = 8
//					j = 5, k = 9
//					j = 5, k = 10
//					j = 5, k = 11
//					j = 6, k = 7
//					j = 6, k = 8
//					j = 6, k = 9
//					j = 6, k = 10
//					j = 6, k = 11
//					j = 7, k = 8
//					j = 7, k = 9
//					j = 7, k = 10
//					j = 7, k = 11
//					j = 8, k = 9
//					j = 8, k = 10
//					j = 8, k = 11
//					j = 9, k = 10
//					j = 9, k = 11
//					j = 10, k = 11
			
			


			for(ArrayList<Integer> a : dist1) {
				for(int t : a) {
					System.out.println(t);
				}
				System.out.println("=======");
			}
			
		}
		sc.close();
	}

}
